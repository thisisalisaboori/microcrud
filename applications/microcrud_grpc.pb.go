// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: microcrud.proto

package main

import (
	context "context"

	grpc "google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	//codes "google.golang.org/grpc/codes"
	//status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CrudEntity_Create_FullMethodName  = "/microcrud.CrudEntity/Create"
	CrudEntity_Update_FullMethodName  = "/microcrud.CrudEntity/Update"
	CrudEntity_Delete_FullMethodName  = "/microcrud.CrudEntity/Delete"
	CrudEntity_GetById_FullMethodName = "/microcrud.CrudEntity/GetById"
	CrudEntity_GetData_FullMethodName = "/microcrud.CrudEntity/GetData"
)

// CrudEntityClient is the client API for CrudEntity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrudEntityClient interface {
	Create(ctx context.Context, in *EntityProtocol, opts ...grpc.CallOption) (*ResultService, error)
	Update(ctx context.Context, in *EntityProtocol, opts ...grpc.CallOption) (*ResultService, error)
	Delete(ctx context.Context, in *DeleteProtocol, opts ...grpc.CallOption) (*ResultService, error)
	GetById(ctx context.Context, in *GetProtocol, opts ...grpc.CallOption) (*ResultService, error)
	GetData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResultService, error)
}

type crudEntityClient struct {
	cc grpc.ClientConnInterface
}

func NewCrudEntityClient(cc grpc.ClientConnInterface) CrudEntityClient {
	return &crudEntityClient{cc}
}

func (c *crudEntityClient) Create(ctx context.Context, in *EntityProtocol, opts ...grpc.CallOption) (*ResultService, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultService)
	err := c.cc.Invoke(ctx, CrudEntity_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudEntityClient) Update(ctx context.Context, in *EntityProtocol, opts ...grpc.CallOption) (*ResultService, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultService)
	err := c.cc.Invoke(ctx, CrudEntity_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudEntityClient) Delete(ctx context.Context, in *DeleteProtocol, opts ...grpc.CallOption) (*ResultService, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultService)
	err := c.cc.Invoke(ctx, CrudEntity_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudEntityClient) GetById(ctx context.Context, in *GetProtocol, opts ...grpc.CallOption) (*ResultService, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultService)
	err := c.cc.Invoke(ctx, CrudEntity_GetById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudEntityClient) GetData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResultService, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultService)
	err := c.cc.Invoke(ctx, CrudEntity_GetData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrudEntityServer is the server API for CrudEntity service.
// All implementations must embed UnimplementedCrudEntityServer
// for forward compatibility.
type ICrudEntityServer interface {
	Create(context.Context, *EntityProtocol) (*ResultService, error)
	Update(context.Context, *EntityProtocol) (*ResultService, error)
	Delete(context.Context, *DeleteProtocol) (*ResultService, error)
	GetById(context.Context, *GetProtocol) (*ResultService, error)
	GetData(context.Context, *emptypb.Empty) (*ResultService, error)
	mustEmbedUnimplementedCrudEntityServer()
}

// UnimplementedCrudEntityServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type MyCrudEntityServer struct{}

func (MyCrudEntityServer) Create(context.Context, *EntityProtocol) (*ResultService, error) {

	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (MyCrudEntityServer) Update(context.Context, *EntityProtocol) (*ResultService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (MyCrudEntityServer) Delete(context.Context, *DeleteProtocol) (*ResultService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (MyCrudEntityServer) GetById(context.Context, *GetProtocol) (*ResultService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (MyCrudEntityServer) GetData(context.Context, *emptypb.Empty) (*ResultService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (MyCrudEntityServer) mustEmbedUnimplementedCrudEntityServer() {}
func (MyCrudEntityServer) testEmbeddedByValue()                    {}

// UnsafeCrudEntityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrudEntityServer will
// result in compilation errors.
type UnsafeCrudEntityServer interface {
	mustEmbedUnimplementedCrudEntityServer()
}

func RegisterCrudEntityServer(s grpc.ServiceRegistrar, srv ICrudEntityServer) {
	// If the following call pancis, it indicates UnimplementedCrudEntityServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CrudEntity_ServiceDesc, srv)
}

func _CrudEntity_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityProtocol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICrudEntityServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudEntity_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICrudEntityServer).Create(ctx, req.(*EntityProtocol))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudEntity_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityProtocol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICrudEntityServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudEntity_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICrudEntityServer).Update(ctx, req.(*EntityProtocol))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudEntity_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProtocol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICrudEntityServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudEntity_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICrudEntityServer).Delete(ctx, req.(*DeleteProtocol))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudEntity_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProtocol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICrudEntityServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudEntity_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICrudEntityServer).GetById(ctx, req.(*GetProtocol))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudEntity_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICrudEntityServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrudEntity_GetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICrudEntityServer).GetData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CrudEntity_ServiceDesc is the grpc.ServiceDesc for CrudEntity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrudEntity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microcrud.CrudEntity",
	HandlerType: (*ICrudEntityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CrudEntity_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CrudEntity_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CrudEntity_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _CrudEntity_GetById_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _CrudEntity_GetData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "microcrud.proto",
}
